'''
Задание 1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив, заданный случайными числами
на промежутке [-100; 100). Выведите на экран исходный и отсортированный массивы.
Сортировка должна быть реализована в виде функции. По возможности доработайте алгоритм (сделайте его умнее).
'''
import random
def rand_list(a, b):
    m = 20
    ls = []
    for i in range(m):
        ls.append(random.randint(a, b))
    return ls

def bubble_sort(ls):
    n = 1
    while n < len(ls):
        for i in range(len(ls) - n):
            if ls[i] < ls[i + 1]:
                ls[i], ls[i + 1] = ls[i + 1], ls[i]
        n += 1
    return ls

r = rand_list(-100, 100)
print(f'Массив случайных чисел от -100 до 100:\n{r}\n')
s = bubble_sort(r)
print(f'Отсортированный методом "пузырька", массив в порядке убывания:\n{s} ')

'''
Улучшить сортировку можно если использовать метод сортировки расческой. Его суть в том, что берем изначально большой интервал
и сравниваяем 1й элемент с последним и постепенно уменьшаем интервал, перебирая все элементы и постепенно приходим к сравнению 
соседних элементов как в "пузырьке", но таких проходов будет минимальное количество.
Везде только один алгоритмя, не понял для чего исользуются флаги, сделал немного по своему. Сортирует правильно.
'''
import random
def rand_list(a, b):
    m = 20
    ls = []
    for i in range(m):
        ls.append(random.randint(a, b))
    return ls

def comb_sort(ls):
    gap = len(ls) - 1
    while gap >= 1:
        for i in range(len(ls) - gap):
            if ls[i] > ls[i + gap]:
                ls[i], ls[i + gap] = ls[i + gap], ls[i]
        gap = (gap * 10) // 13
    return ls

r = rand_list(-100, 100)
print(f'Массив случайных чисел от -100 до 100:\n{r}\n')

s = comb_sort(r)
print(f'Отсортированный методом "расчески", массив в порядке убывания:\n{s} ')
